name: CI

env:
  NODE_VERSION: 18.x
  NPM_REGISTRY: 'https://registry.npmjs.org'
  RUST_VERSION: 1.78

on:
  push:
    # Prevent duplicate runs of this workflow on our own internal PRs.
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches:
      - main

jobs:
  test:
    name: Integration tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          rust-version: ${{ env.RUST_VERSION }}
      - run: npm ci
      - run: npm run build
      - run: cd integration-tests && npm ci && npm run test

  pack:
    name: Pack (main)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Pack
        uses: neon-actions/pack@v0.1
        with:
          node-version: ${{ env.NODE_VERSION }}
          rust-version: ${{ env.RUST_VERSION }}
          github-release: false

  macos-arm64-build:
    name: Builds (macOS arm64)
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-apple-darwin]
    runs-on: macos-13-xlarge
    permissions:
      contents: write
    steps:
      - name: Build
        uses: neon-actions/build@v0.1
        with:
          target: ${{ matrix.target }}
          node-version: ${{ env.NODE_VERSION }}
          rust-version: ${{ env.RUST_VERSION }}
          npm-publish: false
          github-release: false

  macos-x64-build:
    name: Builds (macOS x64)
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-apple-darwin]
    runs-on: macos-13
    permissions:
      contents: write
    steps:
      - name: Build
        uses: neon-actions/build@v0.1
        with:
          target: ${{ matrix.target }}
          node-version: ${{ env.NODE_VERSION }}
          rust-version: ${{ env.RUST_VERSION }}
          npm-publish: false
          github-release: false

  win-x64-builds:
    name: Builds (Windows)
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-pc-windows-msvc]
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
      - name: Build
        uses: neon-actions/build@v0.1
        with:
          target: ${{ matrix.target }}
          node-version: ${{ env.NODE_VERSION }}
          rust-version: ${{ env.RUST_VERSION }}
          npm-publish: false
          github-release: false
  win32-arm64-builds: # Added new job for win32-arm64-msvc
    name: Builds (Windows ARM64)
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-pc-windows-msvc] # Target platform for Windows ARM64 MSVC
    runs-on: windows-latest # Using windows-latest runner, may need to adjust if ARM64 runner is needed
    permissions:
      contents: write
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2 # Still need MSBuild for Windows builds
      - name: Build
        uses: neon-actions/build@v0.1
        with:
          target: ${{ matrix.target }}
          node-version: ${{ env.NODE_VERSION }}
          rust-version: ${{ env.RUST_VERSION }}
          npm-publish: false
          github-release: false
  other-builds:
    name: Builds (other platforms)
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl, aarch64-unknown-linux-gnu, aarch64-unknown-linux-musl]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.18.x'
      - name: Build
        uses: neon-actions/build@v0.1
        with:
          target: ${{ matrix.target }}
          node-version: ${{ env.NODE_VERSION }}
          rust-version: ${{ env.RUST_VERSION }}
          use-cross: true
          npm-publish: false
          github-release: false
