/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** SQLite connection options. */
export interface Options {
  timeout?: number
  authToken?: string
  syncUrl?: string
  readYourWrites?: boolean
  syncPeriod?: number
  encryptionCipher?: string
  encryptionKey?: string
  remoteEncryptionKey?: string
}
export declare function connect(path: string, opts?: Options | undefined | null): Promise<Database>
/** Result of a database sync operation. */
export interface SyncResult {
  /** The number of frames synced. */
  framesSynced: number
  /** The replication index. */
  replicationIndex: number
}
/** Prepares a statement in blocking mode. */
export declare function databasePrepareSync(db: Database, sql: string): Statement
/** Syncs the database in blocking mode. */
export declare function databaseSyncSync(db: Database): SyncResult
/** Executes SQL in blocking mode. */
export declare function databaseExecSync(db: Database, sql: string): void
/** Gets first row from statement in blocking mode. */
export declare function statementGetSync(stmt: Statement, params?: unknown | undefined | null): unknown
/** Runs a statement in blocking mode. */
export declare function statementRunSync(stmt: Statement, params?: unknown | undefined | null): RunResult
export declare function statementIterateSync(stmt: Statement, params?: unknown | undefined | null): RowsIterator
/** SQLite `run()` result object */
export interface RunResult {
  changes: number
  duration: number
  lastInsertRowid: number
}
/** Retrieve next row from an iterator synchronously. Needed for better-sqlite3 API compatibility. */
export declare function iteratorNextSync(iter: RowsIterator): Record
/** SQLite database connection. */
export declare class Database {
  /**
   * Creates a new database instance.
   *
   * # Arguments
   *
   * * `path` - The path to the database file.
   * * `opts` - The database options.
   */
  constructor(path: string, opts?: Options | undefined | null)
  /** Returns whether the database is in memory-only mode. */
  get memory(): boolean
  /** Returns whether the database is in a transaction. */
  inTransaction(): boolean
  /**
   * Prepares a statement for execution.
   *
   * # Arguments
   *
   * * `sql` - The SQL statement to prepare.
   *
   * # Returns
   *
   * A `Statement` instance.
   */
  prepare(sql: string): Promise<Statement>
  /**
   * Sets the authorizer for the database.
   *
   * # Arguments
   *
   * * `env` - The environment.
   * * `rules_obj` - The rules object.
   *
   * The `rules_obj` is a JavaScript object with the following properties:
   *
   * * `Authorization.ALLOW` - Allow access to the table.
   * * `Authorization.DENY` - Deny access to the table.
   *
   * Example:
   *
   * ```javascript
   * db.authorizer({
   *     "users": Authorization.ALLOW
   * });
   * ```
   */
  authorizer(rulesObj: object): void
  /**
   * Loads an extension into the database.
   *
   * # Arguments
   *
   * * `path` - The path to the extension file.
   * * `entry_point` - The entry point of the extension.
   *
   */
  loadExtension(path: string, entryPoint?: string | undefined | null): void
  /**
   * Returns the maximum write replication index.
   *
   * # Returns
   *
   * The maximum write replication index.
   */
  maxWriteReplicationIndex(): number
  /**
   * Executes a SQL statement.
   *
   * # Arguments
   *
   * * `env` - The environment.
   * * `sql` - The SQL statement to execute.
   */
  exec(sql: string): Promise<void>
  /**
   * Syncs the database.
   *
   * # Returns
   *
   * A `SyncResult` instance.
   */
  sync(): Promise<SyncResult>
  /**
   * Interrupts any ongoing database operations.
   *
   * # Arguments
   *
   * * `env` - The environment.
   */
  interrupt(): void
  /** Closes the database connection. */
  close(): void
  /**
   * Sets the default safe integers mode.
   *
   * # Arguments
   *
   * * `toggle` - Whether to use safe integers by default.
   */
  defaultSafeIntegers(toggle?: boolean | undefined | null): void
}
/** SQLite statement object. */
export declare class Statement {
  /**
   * Executes a SQL statement.
   *
   * # Arguments
   *
   * * `params` - The parameters to bind to the statement.
   */
  run(params?: unknown | undefined | null): RunResult
  /**
   * Executes a SQL statement and returns the first row.
   *
   * # Arguments
   *
   * * `env` - The environment.
   * * `params` - The parameters to bind to the statement.
   */
  get(params?: unknown | undefined | null): object
  /**
   * Create an iterator over the rows of a statement.
   *
   * # Arguments
   *
   * * `env` - The environment.
   * * `params` - The parameters to bind to the statement.
   */
  iterate(params?: unknown | undefined | null): object
  raw(raw?: boolean | undefined | null): this
  pluck(pluck?: boolean | undefined | null): this
  timing(timing?: boolean | undefined | null): this
  columns(): unknown[]
  safeIntegers(toggle?: boolean | undefined | null): this
  interrupt(): void
}
/** A raw iterator over rows. The JavaScript layer wraps this in a iterable. */
export declare class RowsIterator {
  next(): Promise<Record>
}
export declare class Record {
  get value(): unknown
  get done(): boolean
}
